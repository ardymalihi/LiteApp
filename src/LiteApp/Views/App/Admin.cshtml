@model LiteApp.ViewModels.AdminViewModel
@{
    var data = Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.App));
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Admin Panel</title>

    <!-- Foundation CSS framework (Bootstrap and jQueryUI also supported) -->
    <link rel='stylesheet' href='//cdnjs.cloudflare.com/ajax/libs/foundation/5.5.3/css/foundation.min.css'>
    <!-- Font Awesome icons (Bootstrap, Foundation, and jQueryUI also supported) -->
    <link rel='stylesheet' href='//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.0.3/css/font-awesome.css'>
    
    <script src="~/js/jsoneditor.js"></script>
    <script src="~/lib/jquery/dist/jquery.js"></script>

    <script src="//cdn.jsdelivr.net/sceditor/1.4.3/jquery.sceditor.bbcode.min.js"></script>
    <link rel="stylesheet" href="//cdn.jsdelivr.net/sceditor/1.4.3/jquery.sceditor.default.min.css">
    <script src="//cdn.jsdelivr.net/sceditor/1.4.3/jquery.sceditor.xhtml.min.js"></script>
    <link rel="stylesheet" href="//cdn.jsdelivr.net/sceditor/1.4.3/themes/default.min.css">

    <link href="~/css/admin.css" rel="stylesheet" />

    <script>
    // Set the default CSS theme and icon library globally
    JSONEditor.defaults.theme = 'foundation5';
    JSONEditor.defaults.iconlib = 'fontawesome4';
    </script>
</head>
<body>
    <div class='row fullWidth header'>
        <div class='medium-12-columns'>
            <button id='submit'>Save</button>
            <button id='restore' class='secondary'>Undo All Changes</button>
             <span id='valid_indicator' class='label'></span>
        </div>
    </div>
    <div class='row fullWidth content'>
        <div id='editor_holder' class='large-12 columns'></div>
    </div>

    <script>
      // This is the starting value for the editor
      // We will use this to seed the initial editor
      // and to provide a "Restore to Default" button.
        var starting_value = @data;

      // Initialize the editor
      var editor = new JSONEditor(document.getElementById('editor_holder'),{
        // Enable fetching schemas via ajax
          ajax: true,
          disable_collapse: true,
          disable_edit_json: true,
          disable_properties: true,
          disable_array_reorder: true,
          //keep_oneof_values: false,

        // The schema for the editor
        schema: {
          $ref: "/js/schema.json",
          format: ""
        },

        // Seed the form with a starting value
        startval: starting_value
      });

      // Hook up the submit button to log to the console
      document.getElementById('submit').addEventListener('click',function() {
          // Get the value from the editor
          $.ajax({
              type: "POST",
              contentType: "application/json; charset=utf-8",
              url: "/app/save",
              data: JSON.stringify(editor.getValue()),
              success: function (result) {
                  document.location.href = "/";
              }
          });
      });

      // Hook up the Restore to Default button
      document.getElementById('restore').addEventListener('click',function() {
        editor.setValue(starting_value);
      });

      // Hook up the validation indicator to update its
      // status whenever the editor changes
      editor.on('change',function() {
        // Get an array of errors from the validator
        var errors = editor.validate();

        var indicator = document.getElementById('valid_indicator');

        // Not valid
        if(errors.length) {
          indicator.className = 'label alert';
          indicator.textContent = 'not valid';
        }
        // Valid
        else {
          indicator.className = 'label success';
          indicator.textContent = 'valid';
        }
      });
    </script>
</body>
</html>
